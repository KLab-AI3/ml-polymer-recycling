/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint
         */
        get: operations["health_check_api_v1_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/system": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Info
         * @description Get system information and available models
         */
        get: operations["get_system_info_api_v1_system_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Models
         * @description Get list of available models
         */
        get: operations["get_models_api_v1_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analyze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze Spectrum
         * @description Analyze a single spectrum
         */
        post: operations["analyze_spectrum_api_v1_analyze_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/explain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Explain Spectrum
         * @description Analyze a spectrum with explainability features
         */
        post: operations["explain_spectrum_api_v1_explain_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/explain/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Explain Batch Spectra
         * @description Analyze multiple spectra with explainability features
         */
        post: operations["explain_batch_spectra_api_v1_explain_batch_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/analyze/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze Batch
         * @description Analyze multiple spectra in batch
         */
        post: operations["analyze_batch_api_v1_analyze_batch_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/compare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Compare Models
         * @description Compare multiple models on a single spectrum
         */
        post: operations["compare_models_api_v1_compare_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Spectrum File
         * @description Upload and parse a spectrum file
         */
        post: operations["upload_spectrum_file_api_v1_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check Legacy
         * @description Legacy health check endpoint - redirects to v1
         */
        get: operations["health_check_legacy_api_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Info Legacy
         * @description Legacy system info endpoint - redirects to v1
         */
        get: operations["get_system_info_legacy_api_system_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Models Legacy
         * @description Legacy models endpoint - redirects to v1
         */
        get: operations["get_models_legacy_api_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint when frontend is not built
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AnalysisRequest
         * @description Request for single spectrum analysis
         */
        AnalysisRequest: {
            spectrum: components["schemas"]["SpectrumData"];
            /**
             * Model Name
             * @description Model name to use for analysis
             */
            model_name: string;
            /**
             * Modality
             * @description Spectroscopy modality
             * @default raman
             * @enum {string}
             */
            modality: "raman" | "ftir";
            /**
             * Include Provenance
             * @description Include full provenance metadata
             * @default true
             */
            include_provenance: boolean;
        };
        /**
         * BatchAnalysisRequest
         * @description Request for batch spectrum analysis
         */
        BatchAnalysisRequest: {
            /** Spectra */
            spectra: components["schemas"]["SpectrumData"][];
            /**
             * Model Name
             * @description Model name to use for analysis
             */
            model_name: string;
            /**
             * Modality
             * @description Spectroscopy modality
             * @default raman
             * @enum {string}
             */
            modality: "raman" | "ftir";
            /**
             * Include Provenance
             * @description Include full provenance metadata
             * @default true
             */
            include_provenance: boolean;
        };
        /**
         * BatchError
         * @description Details of a single error within a batch request
         */
        BatchError: {
            /**
             * Filename
             * @description Filename of the spectrum that failed
             */
            filename?: string | null;
            /**
             * Error
             * @description The error message
             */
            error: string;
        };
        /**
         * BatchPredictionResult
         * @description Batch prediction results
         */
        BatchPredictionResult: {
            /**
             * Results
             * @description Individual prediction results
             */
            results?: components["schemas"]["PredictionResult"][];
            /**
             * Errors
             * @description Errors for spectra that failed processing
             */
            errors?: components["schemas"]["BatchError"][];
            /**
             * Summary
             * @description Batch summary statistics
             */
            summary?: {
                [key: string]: unknown;
            };
            /**
             * Total Processing Time
             * @description Total batch processing time
             */
            total_processing_time: number;
            /**
             * Timestamp
             * @description Batch processing timestamp
             */
            timestamp: string;
        };
        /** Body_upload_spectrum_file_api_v1_upload_post */
        Body_upload_spectrum_file_api_v1_upload_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /**
         * ComparisonRequest
         * @description Request for multi-model comparison
         */
        ComparisonRequest: {
            spectrum: components["schemas"]["SpectrumData"];
            /**
             * Model Names
             * @description Models to compare (all if None)
             */
            model_names?: string[] | null;
            /**
             * Modality
             * @description Spectroscopy modality
             * @default raman
             * @enum {string}
             */
            modality: "raman" | "ftir";
            /**
             * Include Provenance
             * @description Include full provenance metadata
             * @default true
             */
            include_provenance: boolean;
        };
        /**
         * ComparisonResult
         * @description Multi-model comparison results
         */
        ComparisonResult: {
            /**
             * Spectrum Id
             * @description Unique identifier for the spectrum
             */
            spectrum_id: string;
            /**
             * Model Results
             * @description Results per model
             */
            model_results?: {
                [key: string]: components["schemas"]["PredictionResult"];
            };
            /**
             * Consensus Prediction
             * @description Consensus prediction if available
             */
            consensus_prediction?: number | null;
            /**
             * Confidence Variance
             * @description Variance in confidence scores
             */
            confidence_variance: number;
            /**
             * Agreement Score
             * @description Model agreement score
             */
            agreement_score: number;
            /**
             * Timestamp
             * @description Comparison timestamp
             */
            timestamp: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * ModelInfo
         * @description Model information and capabilities
         */
        ModelInfo: {
            /**
             * Name
             * @description Model identifier
             */
            name: string;
            /**
             * Description
             * @description Model description
             */
            description: string;
            /**
             * Input Length
             * @description Expected input length
             */
            input_length: number;
            /**
             * Num Classes
             * @description Number of output classes
             */
            num_classes: number;
            /**
             * Supported Modalities
             * @description Supported modalities
             */
            supported_modalities?: string[];
            /**
             * Performance
             * @description Performance metrics
             */
            performance?: {
                [key: string]: number;
            };
            /**
             * Parameters
             * @description Parameter count
             */
            parameters?: string | null;
            /**
             * Speed
             * @description Relative speed category
             */
            speed?: string | null;
            /**
             * Citation
             * @description Citation/reference
             */
            citation?: string | null;
            /**
             * Available
             * @description Whether model is available for inference
             */
            available: boolean;

            display_name?: string;

            publication_url?: string;
        };
        /**
         * ModelMetadata
         * @description Model metadata and calibration details
         */
        ModelMetadata: {
            /**
             * Model Name
             * @description Model identifier
             */
            model_name: string;
            /**
             * Model Description
             * @description Model description
             */
            model_description: string;
            /**
             * Model Version
             * @description Model version
             */
            model_version?: string | null;
            /**
             * Training Date
             * @description Model training date
             */
            training_date?: string | null;
            /**
             * Input Length
             * @description Expected input length
             */
            input_length: number;
            /**
             * Num Classes
             * @description Number of output classes
             */
            num_classes: number;
            /**
             * Parameters Count
             * @description Number of parameters
             */
            parameters_count?: string | null;
            /**
             * Performance Metrics
             * @description Training performance
             */
            performance_metrics?: {
                [key: string]: number;
            };
            /**
             * Supported Modalities
             * @description Supported spectroscopy modalities
             */
            supported_modalities?: string[];
            /**
             * Citation
             * @description Model citation/reference
             */
            citation?: string | null;
            /**
             * Weights Loaded
             * @description Whether trained weights were loaded
             */
            weights_loaded: boolean;
            /**
             * Weights Path
             * @description Path to loaded weights
             */
            weights_path?: string | null;
        };
        /**
         * PredictionResult
         * @description Single prediction result with full provenance
         */
        PredictionResult: {
            /**
             * Prediction
             * @description Predicted class (0=Stable, 1=Weathered)
             */
            prediction: number;
            /**
             * Prediction Label
             * @description Human-readable prediction label
             */
            prediction_label: string;
            /**
             * Confidence
             * @description Prediction confidence score
             */
            confidence: number;
            /**
             * Probabilities
             * @description Class probabilities
             */
            probabilities: number[];
            /**
             * Logits
             * @description Raw model logits
             */
            logits: number[];
            preprocessing: components["schemas"]["PreprocessingMetadata"];
            quality_control: components["schemas"]["QualityControlMetadata"];
            model_metadata: components["schemas"]["ModelMetadata"];
            /**
             * Inference Time
             * @description Inference time in seconds
             */
            inference_time: number;
            /**
             * Preprocessing Time
             * @description Preprocessing time in seconds
             */
            preprocessing_time: number;
            /**
             * Total Time
             * @description Total processing time in seconds
             */
            total_time: number;
            /**
             * Memory Usage Mb
             * @description Memory usage in MB
             */
            memory_usage_mb: number;
            original_spectrum: components["schemas"]["SpectrumData"];
            processed_spectrum: components["schemas"]["SpectrumData"];
            /**
             * Timestamp
             * @description Processing timestamp (ISO format)
             */
            timestamp: string;
        };
        /**
         * PreprocessingMetadata
         * @description Preprocessing provenance metadata
         */
        PreprocessingMetadata: {
            /**
             * Target Length
             * @description Target resampling length
             */
            target_length: number;
            /**
             * Baseline Degree
             * @description Polynomial baseline removal degree
             */
            baseline_degree: number;
            /**
             * Smooth Window
             * @description Smoothing window length
             */
            smooth_window: number;
            /**
             * Smooth Polyorder
             * @description Smoothing polynomial order
             */
            smooth_polyorder: number;
            /**
             * Normalization Method
             * @description Normalization method applied
             */
            normalization_method: string;
            /**
             * Modality Validated
             * @description Whether modality validation passed
             */
            modality_validated: boolean;
            /**
             * Validation Issues
             * @description Any validation issues found
             */
            validation_issues?: string[];
            /**
             * Original Length
             * @description Original spectrum length
             */
            original_length: number;
            /**
             * Wavenumber Range
             * @description [min, max] wavenumber range
             */
            wavenumber_range: number[];
        };
        /**
         * QualityControlMetadata
         * @description Quality control check results
         */
        QualityControlMetadata: {
            /**
             * Signal To Noise Ratio
             * @description Estimated SNR
             */
            signal_to_noise_ratio?: number | null;
            /**
             * Baseline Stability
             * @description Baseline stability metric
             */
            baseline_stability?: number | null;
            /**
             * Spectral Resolution
             * @description Estimated spectral resolution
             */
            spectral_resolution?: number | null;
            /**
             * Cosmic Ray Detected
             * @description Cosmic ray spikes detected
             * @default false
             */
            cosmic_ray_detected: boolean;
            /**
             * Saturation Detected
             * @description Signal saturation detected
             * @default false
             */
            saturation_detected: boolean;
            /**
             * Issues
             * @description QC issues found
             */
            issues?: string[];
        };
        /**
         * SpectrumData
         * @description Single spectrum data for analysis
         */
        SpectrumData: {
            /**
             * X Values
             * @description Wavenumber values (cm⁻¹)
             */
            x_values: number[];
            /**
             * Y Values
             * @description Intensity values
             */
            y_values: number[];
            /**
             * Filename
             * @description Original filename
             */
            filename?: string | null;
        };
        /**
         * SystemHealth
         * @description System health metrics
         */
        SystemHealth: {
            /**
             * Status
             * @description Overall system status, e.g., 'ok'.
             */
            status: string;
            /**
             * Timestamp
             * @description The server timestamp of the health check.
             */
            timestamp: number;
            /** Models Loaded */
            models_loaded: number;
            /** Total Models */
            total_models: number;
            /** Memory Usage Mb */
            memory_usage_mb: number;
            /** Torch Version */
            torch_version: string;
            /** Cuda Available */
            cuda_available: boolean;
        };
        /**
         * SystemInfo
         * @description System information and health
         */
        SystemInfo: {
            /**
             * Version
             * @description API version
             */
            version: string;
            /**
             * Available Models
             * @description Available models
             */
            available_models?: components["schemas"]["ModelInfo"][];
            /**
             * Supported Modalities
             * @description Supported spectroscopy modalities
             */
            supported_modalities?: string[];
            /**
             * Max Batch Size
             * @description Maximum batch size
             * @default 100
             */
            max_batch_size: number;
            /**
             * Target Spectrum Length
             * @description Target spectrum length
             * @default 500
             */
            target_spectrum_length: number;
            system_health: components["schemas"]["SystemHealth"];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    health_check_api_v1_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_system_info_api_v1_system_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemInfo"];
                };
            };
        };
    };
    get_models_api_v1_models_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelInfo"][];
                };
            };
        };
    };
    analyze_spectrum_api_v1_analyze_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnalysisRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PredictionResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    explain_spectrum_api_v1_explain_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnalysisRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    explain_batch_spectra_api_v1_explain_batch_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BatchAnalysisRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    analyze_batch_api_v1_analyze_batch_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BatchAnalysisRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchPredictionResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    compare_models_api_v1_compare_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComparisonRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComparisonResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_spectrum_file_api_v1_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_spectrum_file_api_v1_upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpectrumData"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_legacy_api_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_system_info_legacy_api_system_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_models_legacy_api_models_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
